//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GameControls"",
            ""id"": ""680fe75b-a4b0-4323-a118-17874a1c192f"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7cb753fd-1347-4250-9589-38df0e469411"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""d0f4afb5-157e-4acc-b5f3-c6029d536fcd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""9ed64655-5de5-49cc-ba8d-552c80ba7d7b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""1fca8b66-37f0-407c-8879-699b45b864f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inspect"",
                    ""type"": ""Button"",
                    ""id"": ""5664cb3a-76ab-4ae4-bd66-ef8c9d01fab6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Journal"",
                    ""type"": ""Button"",
                    ""id"": ""2f2bf636-6f73-43a3-bb22-15a6a1ab43f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointAndClick"",
                    ""type"": ""Button"",
                    ""id"": ""68feb764-6574-4da7-a5b1-1c221e0b4fef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Save"",
                    ""type"": ""Button"",
                    ""id"": ""85e01d42-396d-40b8-a803-1f158f63b0cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Load"",
                    ""type"": ""Button"",
                    ""id"": ""db1aba59-8604-4f4b-911e-4d667277e1df"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Menu"",
                    ""type"": ""Button"",
                    ""id"": ""3a88a262-803f-4b66-b524-528efa2ae9b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""714af40e-a6c0-4486-83eb-e21d6159e8ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""e7cc4310-f310-4235-982c-228eef15958b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6f36eff2-e665-40fa-9e12-cfbff3e88111"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""14355c20-802e-4a58-9935-1938b527e50d"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""3b298dea-3de9-4d14-b9c4-a16f868c46e7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f3da9558-6845-4c2d-8563-c2c2e1b4eae6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""JoyStick"",
                    ""id"": ""fbb34713-4e88-4947-be8d-3285f878357e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a867568c-7d7f-41e8-b6a7-6f598392dac6"",
                    ""path"": ""<Joystick>/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3f04755-b864-4f34-9317-b56ecdd4da65"",
                    ""path"": ""<Joystick>/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ec4a4b8b-0ca2-462e-902f-1fbd58a27006"",
                    ""path"": ""<Joystick>/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""050bdf0d-3f3b-4777-bde6-33be8c3fd54d"",
                    ""path"": ""<Joystick>/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""6368bc90-56f6-4a39-85d6-7bda92f7ee1a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e6271de2-23e6-4b99-976c-4e8a6b65cd24"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""62851d4c-cf24-4aff-8a0f-b6e6ad206fcf"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""a2fe19c8-2d0f-4c3a-8175-86354aec2cbf"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""33e2900e-96b6-48f9-8e90-c8040c286ae7"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""MouseScroll"",
                    ""id"": ""244be58f-be2e-4842-97e2-71062e61d391"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""b08f69f2-9439-4951-a425-0e2210414644"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""51f3eb24-30b1-4be4-a710-752804557acb"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0975c093-4606-4a3f-bc37-371a8d687a44"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23f5019d-23b0-4d19-b009-1fe37312c7ca"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inspect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a691c7d0-1ec6-405e-8bb9-b947964bf157"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Journal"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15d93a5-595a-4eab-84b5-edfa02f07dec"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointAndClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""068b561e-26a9-4b17-a745-2a3669034ad2"",
                    ""path"": ""<Keyboard>/f5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Save"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a90855e9-01cd-4292-a650-e56f7ce4ebc4"",
                    ""path"": ""<Keyboard>/f9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Load"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bebca7c-bce7-4bd3-bea5-977aa3fcb723"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Menu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3c86c44f-d0ed-405f-ad8e-af1ce641fed8"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuControls"",
            ""id"": ""f63ccb1b-a8e5-47a0-a734-2ef5ae848fcb"",
            ""actions"": [
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""8fa70315-fd91-4e9e-a23b-ff2321ed1d6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseClick"",
                    ""type"": ""Button"",
                    ""id"": ""f106af40-796d-486b-a9e0-622e73b2bb75"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""930e912b-e8cd-485b-a953-a1b2472016ba"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a7e7d47-974e-4163-8c22-9242185d2ebf"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""DialogueControls"",
            ""id"": ""afedfc76-e503-4369-978a-3ab62d2d9cce"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""f7d4a2f7-c354-4766-9963-b65808a097cc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b40de8dd-4005-43b0-80c5-d031d1ce365f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""New action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InspectionControls"",
            ""id"": ""a81194c8-9c8f-417f-bfc2-0d6c7e9b83d8"",
            ""actions"": [
                {
                    ""name"": ""ZoomEvidence"",
                    ""type"": ""Value"",
                    ""id"": ""ab6e2744-ee7d-4332-a2a8-6ed0d411d11d"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""efa5d934-5bf7-4bd4-8ecc-84afd24606fe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""0b93cb98-2fb6-4f3f-9fa7-8cf502ed25c4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TakeEvidence"",
                    ""type"": ""Button"",
                    ""id"": ""f73e2c8d-fa49-44a2-bb57-bb7f25e082dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""MouseScroll"",
                    ""id"": ""18cf3696-43f6-4770-ba5f-ef77753db333"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomEvidence"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""eb144d0d-3272-4665-a739-4784ea8c5b87"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomEvidence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""f4c350e6-a7b3-475a-a763-9954ddc77931"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ZoomEvidence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Rotation"",
                    ""id"": ""8b9fa23a-cff8-439a-8f84-0a507d6d38d3"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8adbbe1a-f9f0-4848-be45-0355a5074eae"",
                    ""path"": ""<Mouse>/delta/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e4ed855b-41bb-4dcf-a43c-3269d6e3fcda"",
                    ""path"": ""<Mouse>/delta/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""17b273b7-eeab-4b05-ba37-ef3b462fb581"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cef39175-f5b2-43f3-8eb0-88532d425258"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""59dca8e6-1750-4fe0-b1e1-34b90103953e"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eecb7688-fa64-44cb-8427-1ce8b3156d11"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakeEvidence"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MainMenuControls"",
            ""id"": ""6a6e052c-deb9-4a77-838e-f58f8e6e7496"",
            ""actions"": [
                {
                    ""name"": ""CloseMainMenu"",
                    ""type"": ""Button"",
                    ""id"": ""e6fc3913-aa28-49a2-b721-c886576d2191"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7475744c-175d-4611-9305-56e379970e68"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CloseMainMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // GameControls
        m_GameControls = asset.FindActionMap("GameControls", throwIfNotFound: true);
        m_GameControls_Move = m_GameControls.FindAction("Move", throwIfNotFound: true);
        m_GameControls_Look = m_GameControls.FindAction("Look", throwIfNotFound: true);
        m_GameControls_Zoom = m_GameControls.FindAction("Zoom", throwIfNotFound: true);
        m_GameControls_Interact = m_GameControls.FindAction("Interact", throwIfNotFound: true);
        m_GameControls_Inspect = m_GameControls.FindAction("Inspect", throwIfNotFound: true);
        m_GameControls_Journal = m_GameControls.FindAction("Journal", throwIfNotFound: true);
        m_GameControls_PointAndClick = m_GameControls.FindAction("PointAndClick", throwIfNotFound: true);
        m_GameControls_Save = m_GameControls.FindAction("Save", throwIfNotFound: true);
        m_GameControls_Load = m_GameControls.FindAction("Load", throwIfNotFound: true);
        m_GameControls_Menu = m_GameControls.FindAction("Menu", throwIfNotFound: true);
        m_GameControls_Sprint = m_GameControls.FindAction("Sprint", throwIfNotFound: true);
        // MenuControls
        m_MenuControls = asset.FindActionMap("MenuControls", throwIfNotFound: true);
        m_MenuControls_Exit = m_MenuControls.FindAction("Exit", throwIfNotFound: true);
        m_MenuControls_MouseClick = m_MenuControls.FindAction("MouseClick", throwIfNotFound: true);
        // DialogueControls
        m_DialogueControls = asset.FindActionMap("DialogueControls", throwIfNotFound: true);
        m_DialogueControls_Newaction = m_DialogueControls.FindAction("New action", throwIfNotFound: true);
        // InspectionControls
        m_InspectionControls = asset.FindActionMap("InspectionControls", throwIfNotFound: true);
        m_InspectionControls_ZoomEvidence = m_InspectionControls.FindAction("ZoomEvidence", throwIfNotFound: true);
        m_InspectionControls_Rotate = m_InspectionControls.FindAction("Rotate", throwIfNotFound: true);
        m_InspectionControls_Click = m_InspectionControls.FindAction("Click", throwIfNotFound: true);
        m_InspectionControls_TakeEvidence = m_InspectionControls.FindAction("TakeEvidence", throwIfNotFound: true);
        // MainMenuControls
        m_MainMenuControls = asset.FindActionMap("MainMenuControls", throwIfNotFound: true);
        m_MainMenuControls_CloseMainMenu = m_MainMenuControls.FindAction("CloseMainMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControls
    private readonly InputActionMap m_GameControls;
    private List<IGameControlsActions> m_GameControlsActionsCallbackInterfaces = new List<IGameControlsActions>();
    private readonly InputAction m_GameControls_Move;
    private readonly InputAction m_GameControls_Look;
    private readonly InputAction m_GameControls_Zoom;
    private readonly InputAction m_GameControls_Interact;
    private readonly InputAction m_GameControls_Inspect;
    private readonly InputAction m_GameControls_Journal;
    private readonly InputAction m_GameControls_PointAndClick;
    private readonly InputAction m_GameControls_Save;
    private readonly InputAction m_GameControls_Load;
    private readonly InputAction m_GameControls_Menu;
    private readonly InputAction m_GameControls_Sprint;
    public struct GameControlsActions
    {
        private @GameInput m_Wrapper;
        public GameControlsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_GameControls_Move;
        public InputAction @Look => m_Wrapper.m_GameControls_Look;
        public InputAction @Zoom => m_Wrapper.m_GameControls_Zoom;
        public InputAction @Interact => m_Wrapper.m_GameControls_Interact;
        public InputAction @Inspect => m_Wrapper.m_GameControls_Inspect;
        public InputAction @Journal => m_Wrapper.m_GameControls_Journal;
        public InputAction @PointAndClick => m_Wrapper.m_GameControls_PointAndClick;
        public InputAction @Save => m_Wrapper.m_GameControls_Save;
        public InputAction @Load => m_Wrapper.m_GameControls_Load;
        public InputAction @Menu => m_Wrapper.m_GameControls_Menu;
        public InputAction @Sprint => m_Wrapper.m_GameControls_Sprint;
        public InputActionMap Get() { return m_Wrapper.m_GameControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlsActions set) { return set.Get(); }
        public void AddCallbacks(IGameControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_GameControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameControlsActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Inspect.started += instance.OnInspect;
            @Inspect.performed += instance.OnInspect;
            @Inspect.canceled += instance.OnInspect;
            @Journal.started += instance.OnJournal;
            @Journal.performed += instance.OnJournal;
            @Journal.canceled += instance.OnJournal;
            @PointAndClick.started += instance.OnPointAndClick;
            @PointAndClick.performed += instance.OnPointAndClick;
            @PointAndClick.canceled += instance.OnPointAndClick;
            @Save.started += instance.OnSave;
            @Save.performed += instance.OnSave;
            @Save.canceled += instance.OnSave;
            @Load.started += instance.OnLoad;
            @Load.performed += instance.OnLoad;
            @Load.canceled += instance.OnLoad;
            @Menu.started += instance.OnMenu;
            @Menu.performed += instance.OnMenu;
            @Menu.canceled += instance.OnMenu;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
        }

        private void UnregisterCallbacks(IGameControlsActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Inspect.started -= instance.OnInspect;
            @Inspect.performed -= instance.OnInspect;
            @Inspect.canceled -= instance.OnInspect;
            @Journal.started -= instance.OnJournal;
            @Journal.performed -= instance.OnJournal;
            @Journal.canceled -= instance.OnJournal;
            @PointAndClick.started -= instance.OnPointAndClick;
            @PointAndClick.performed -= instance.OnPointAndClick;
            @PointAndClick.canceled -= instance.OnPointAndClick;
            @Save.started -= instance.OnSave;
            @Save.performed -= instance.OnSave;
            @Save.canceled -= instance.OnSave;
            @Load.started -= instance.OnLoad;
            @Load.performed -= instance.OnLoad;
            @Load.canceled -= instance.OnLoad;
            @Menu.started -= instance.OnMenu;
            @Menu.performed -= instance.OnMenu;
            @Menu.canceled -= instance.OnMenu;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
        }

        public void RemoveCallbacks(IGameControlsActions instance)
        {
            if (m_Wrapper.m_GameControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_GameControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameControlsActions @GameControls => new GameControlsActions(this);

    // MenuControls
    private readonly InputActionMap m_MenuControls;
    private List<IMenuControlsActions> m_MenuControlsActionsCallbackInterfaces = new List<IMenuControlsActions>();
    private readonly InputAction m_MenuControls_Exit;
    private readonly InputAction m_MenuControls_MouseClick;
    public struct MenuControlsActions
    {
        private @GameInput m_Wrapper;
        public MenuControlsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Exit => m_Wrapper.m_MenuControls_Exit;
        public InputAction @MouseClick => m_Wrapper.m_MenuControls_MouseClick;
        public InputActionMap Get() { return m_Wrapper.m_MenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMenuControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Add(instance);
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
            @MouseClick.started += instance.OnMouseClick;
            @MouseClick.performed += instance.OnMouseClick;
            @MouseClick.canceled += instance.OnMouseClick;
        }

        private void UnregisterCallbacks(IMenuControlsActions instance)
        {
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
            @MouseClick.started -= instance.OnMouseClick;
            @MouseClick.performed -= instance.OnMouseClick;
            @MouseClick.canceled -= instance.OnMouseClick;
        }

        public void RemoveCallbacks(IMenuControlsActions instance)
        {
            if (m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuControlsActions @MenuControls => new MenuControlsActions(this);

    // DialogueControls
    private readonly InputActionMap m_DialogueControls;
    private List<IDialogueControlsActions> m_DialogueControlsActionsCallbackInterfaces = new List<IDialogueControlsActions>();
    private readonly InputAction m_DialogueControls_Newaction;
    public struct DialogueControlsActions
    {
        private @GameInput m_Wrapper;
        public DialogueControlsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_DialogueControls_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_DialogueControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DialogueControlsActions set) { return set.Get(); }
        public void AddCallbacks(IDialogueControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Add(instance);
            @Newaction.started += instance.OnNewaction;
            @Newaction.performed += instance.OnNewaction;
            @Newaction.canceled += instance.OnNewaction;
        }

        private void UnregisterCallbacks(IDialogueControlsActions instance)
        {
            @Newaction.started -= instance.OnNewaction;
            @Newaction.performed -= instance.OnNewaction;
            @Newaction.canceled -= instance.OnNewaction;
        }

        public void RemoveCallbacks(IDialogueControlsActions instance)
        {
            if (m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDialogueControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_DialogueControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DialogueControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DialogueControlsActions @DialogueControls => new DialogueControlsActions(this);

    // InspectionControls
    private readonly InputActionMap m_InspectionControls;
    private List<IInspectionControlsActions> m_InspectionControlsActionsCallbackInterfaces = new List<IInspectionControlsActions>();
    private readonly InputAction m_InspectionControls_ZoomEvidence;
    private readonly InputAction m_InspectionControls_Rotate;
    private readonly InputAction m_InspectionControls_Click;
    private readonly InputAction m_InspectionControls_TakeEvidence;
    public struct InspectionControlsActions
    {
        private @GameInput m_Wrapper;
        public InspectionControlsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ZoomEvidence => m_Wrapper.m_InspectionControls_ZoomEvidence;
        public InputAction @Rotate => m_Wrapper.m_InspectionControls_Rotate;
        public InputAction @Click => m_Wrapper.m_InspectionControls_Click;
        public InputAction @TakeEvidence => m_Wrapper.m_InspectionControls_TakeEvidence;
        public InputActionMap Get() { return m_Wrapper.m_InspectionControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InspectionControlsActions set) { return set.Get(); }
        public void AddCallbacks(IInspectionControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_InspectionControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InspectionControlsActionsCallbackInterfaces.Add(instance);
            @ZoomEvidence.started += instance.OnZoomEvidence;
            @ZoomEvidence.performed += instance.OnZoomEvidence;
            @ZoomEvidence.canceled += instance.OnZoomEvidence;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Click.started += instance.OnClick;
            @Click.performed += instance.OnClick;
            @Click.canceled += instance.OnClick;
            @TakeEvidence.started += instance.OnTakeEvidence;
            @TakeEvidence.performed += instance.OnTakeEvidence;
            @TakeEvidence.canceled += instance.OnTakeEvidence;
        }

        private void UnregisterCallbacks(IInspectionControlsActions instance)
        {
            @ZoomEvidence.started -= instance.OnZoomEvidence;
            @ZoomEvidence.performed -= instance.OnZoomEvidence;
            @ZoomEvidence.canceled -= instance.OnZoomEvidence;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Click.started -= instance.OnClick;
            @Click.performed -= instance.OnClick;
            @Click.canceled -= instance.OnClick;
            @TakeEvidence.started -= instance.OnTakeEvidence;
            @TakeEvidence.performed -= instance.OnTakeEvidence;
            @TakeEvidence.canceled -= instance.OnTakeEvidence;
        }

        public void RemoveCallbacks(IInspectionControlsActions instance)
        {
            if (m_Wrapper.m_InspectionControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInspectionControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_InspectionControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InspectionControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InspectionControlsActions @InspectionControls => new InspectionControlsActions(this);

    // MainMenuControls
    private readonly InputActionMap m_MainMenuControls;
    private List<IMainMenuControlsActions> m_MainMenuControlsActionsCallbackInterfaces = new List<IMainMenuControlsActions>();
    private readonly InputAction m_MainMenuControls_CloseMainMenu;
    public struct MainMenuControlsActions
    {
        private @GameInput m_Wrapper;
        public MainMenuControlsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @CloseMainMenu => m_Wrapper.m_MainMenuControls_CloseMainMenu;
        public InputActionMap Get() { return m_Wrapper.m_MainMenuControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MainMenuControlsActions set) { return set.Get(); }
        public void AddCallbacks(IMainMenuControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Add(instance);
            @CloseMainMenu.started += instance.OnCloseMainMenu;
            @CloseMainMenu.performed += instance.OnCloseMainMenu;
            @CloseMainMenu.canceled += instance.OnCloseMainMenu;
        }

        private void UnregisterCallbacks(IMainMenuControlsActions instance)
        {
            @CloseMainMenu.started -= instance.OnCloseMainMenu;
            @CloseMainMenu.performed -= instance.OnCloseMainMenu;
            @CloseMainMenu.canceled -= instance.OnCloseMainMenu;
        }

        public void RemoveCallbacks(IMainMenuControlsActions instance)
        {
            if (m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMainMenuControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MainMenuControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MainMenuControlsActions @MainMenuControls => new MainMenuControlsActions(this);
    public interface IGameControlsActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInspect(InputAction.CallbackContext context);
        void OnJournal(InputAction.CallbackContext context);
        void OnPointAndClick(InputAction.CallbackContext context);
        void OnSave(InputAction.CallbackContext context);
        void OnLoad(InputAction.CallbackContext context);
        void OnMenu(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
    }
    public interface IMenuControlsActions
    {
        void OnExit(InputAction.CallbackContext context);
        void OnMouseClick(InputAction.CallbackContext context);
    }
    public interface IDialogueControlsActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface IInspectionControlsActions
    {
        void OnZoomEvidence(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnClick(InputAction.CallbackContext context);
        void OnTakeEvidence(InputAction.CallbackContext context);
    }
    public interface IMainMenuControlsActions
    {
        void OnCloseMainMenu(InputAction.CallbackContext context);
    }
}
